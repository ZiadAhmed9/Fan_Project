
Fan_Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002c2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000004  00800060  00800060  00000336  2**0
                  ALLOC
  2 .stab         000005d0  00000000  00000000  00000338  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000741  00000000  00000000  00000908  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a4 36       	cpi	r26, 0x64	; 100
  6c:	b1 07       	cpc	r27, r17
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 ee 00 	call	0x1dc	; 0x1dc <main>
  74:	0c 94 5f 01 	jmp	0x2be	; 0x2be <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <timer0_init>:
volatile uint8_t current_speed=0;
volatile uint8_t current_timer=0;
volatile int check=0;

void timer0_init(unsigned int set_value)
{
  7c:	df 93       	push	r29
  7e:	cf 93       	push	r28
  80:	00 d0       	rcall	.+0      	; 0x82 <timer0_init+0x6>
  82:	cd b7       	in	r28, 0x3d	; 61
  84:	de b7       	in	r29, 0x3e	; 62
  86:	9a 83       	std	Y+2, r25	; 0x02
  88:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(DDRB,PB3);
  8a:	a7 e3       	ldi	r26, 0x37	; 55
  8c:	b0 e0       	ldi	r27, 0x00	; 0
  8e:	e7 e3       	ldi	r30, 0x37	; 55
  90:	f0 e0       	ldi	r31, 0x00	; 0
  92:	80 81       	ld	r24, Z
  94:	88 60       	ori	r24, 0x08	; 8
  96:	8c 93       	st	X, r24
	TCNT0=0;
  98:	e2 e5       	ldi	r30, 0x52	; 82
  9a:	f0 e0       	ldi	r31, 0x00	; 0
  9c:	10 82       	st	Z, r1
	OCR0=set_value;
  9e:	ec e5       	ldi	r30, 0x5C	; 92
  a0:	f0 e0       	ldi	r31, 0x00	; 0
  a2:	89 81       	ldd	r24, Y+1	; 0x01
  a4:	80 83       	st	Z, r24
	SET_BIT(TCCR0,WGM00);
  a6:	a3 e5       	ldi	r26, 0x53	; 83
  a8:	b0 e0       	ldi	r27, 0x00	; 0
  aa:	e3 e5       	ldi	r30, 0x53	; 83
  ac:	f0 e0       	ldi	r31, 0x00	; 0
  ae:	80 81       	ld	r24, Z
  b0:	80 64       	ori	r24, 0x40	; 64
  b2:	8c 93       	st	X, r24
    SET_BIT(TCCR0,COM01);
  b4:	a3 e5       	ldi	r26, 0x53	; 83
  b6:	b0 e0       	ldi	r27, 0x00	; 0
  b8:	e3 e5       	ldi	r30, 0x53	; 83
  ba:	f0 e0       	ldi	r31, 0x00	; 0
  bc:	80 81       	ld	r24, Z
  be:	80 62       	ori	r24, 0x20	; 32
  c0:	8c 93       	st	X, r24
	SET_BIT(TCCR0,COM00);
  c2:	a3 e5       	ldi	r26, 0x53	; 83
  c4:	b0 e0       	ldi	r27, 0x00	; 0
  c6:	e3 e5       	ldi	r30, 0x53	; 83
  c8:	f0 e0       	ldi	r31, 0x00	; 0
  ca:	80 81       	ld	r24, Z
  cc:	80 61       	ori	r24, 0x10	; 16
  ce:	8c 93       	st	X, r24
	SET_BIT(TCCR0,CS00);
  d0:	a3 e5       	ldi	r26, 0x53	; 83
  d2:	b0 e0       	ldi	r27, 0x00	; 0
  d4:	e3 e5       	ldi	r30, 0x53	; 83
  d6:	f0 e0       	ldi	r31, 0x00	; 0
  d8:	80 81       	ld	r24, Z
  da:	81 60       	ori	r24, 0x01	; 1
  dc:	8c 93       	st	X, r24
//	we used timer 0 for PWM as follows :
//			  1-phase correction mode by setting WGM00 and clearing WGM01
//			  2-no prescaler set CS00
//			  3-non-inverting pwm by setting on compare match
}
  de:	0f 90       	pop	r0
  e0:	0f 90       	pop	r0
  e2:	cf 91       	pop	r28
  e4:	df 91       	pop	r29
  e6:	08 95       	ret

000000e8 <timer0_pause_init>:
void timer0_pause_init(void)
{
  e8:	df 93       	push	r29
  ea:	cf 93       	push	r28
  ec:	cd b7       	in	r28, 0x3d	; 61
  ee:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(DDRB,PB3);
  f0:	a7 e3       	ldi	r26, 0x37	; 55
  f2:	b0 e0       	ldi	r27, 0x00	; 0
  f4:	e7 e3       	ldi	r30, 0x37	; 55
  f6:	f0 e0       	ldi	r31, 0x00	; 0
  f8:	80 81       	ld	r24, Z
  fa:	88 60       	ori	r24, 0x08	; 8
  fc:	8c 93       	st	X, r24
	TCNT0=0;
  fe:	e2 e5       	ldi	r30, 0x52	; 82
 100:	f0 e0       	ldi	r31, 0x00	; 0
 102:	10 82       	st	Z, r1
	CLEAR_BIT(TCCR0,CS00);
 104:	a3 e5       	ldi	r26, 0x53	; 83
 106:	b0 e0       	ldi	r27, 0x00	; 0
 108:	e3 e5       	ldi	r30, 0x53	; 83
 10a:	f0 e0       	ldi	r31, 0x00	; 0
 10c:	80 81       	ld	r24, Z
 10e:	8e 7f       	andi	r24, 0xFE	; 254
 110:	8c 93       	st	X, r24
//	we used timer 0 for PWM as follows :
//			  1-phase correction mode by setting WGM00 and clearing WGM01
//			  2-no prescaler set CS00
//			  3-non-inverting pwm by setting on compare match
}
 112:	cf 91       	pop	r28
 114:	df 91       	pop	r29
 116:	08 95       	ret

00000118 <motor_start_init>:

void motor_start_init(void)
{
 118:	df 93       	push	r29
 11a:	cf 93       	push	r28
 11c:	cd b7       	in	r28, 0x3d	; 61
 11e:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(DDRB,PB0);
 120:	a7 e3       	ldi	r26, 0x37	; 55
 122:	b0 e0       	ldi	r27, 0x00	; 0
 124:	e7 e3       	ldi	r30, 0x37	; 55
 126:	f0 e0       	ldi	r31, 0x00	; 0
 128:	80 81       	ld	r24, Z
 12a:	81 60       	ori	r24, 0x01	; 1
 12c:	8c 93       	st	X, r24
	SET_BIT(DDRB,PB1);
 12e:	a7 e3       	ldi	r26, 0x37	; 55
 130:	b0 e0       	ldi	r27, 0x00	; 0
 132:	e7 e3       	ldi	r30, 0x37	; 55
 134:	f0 e0       	ldi	r31, 0x00	; 0
 136:	80 81       	ld	r24, Z
 138:	82 60       	ori	r24, 0x02	; 2
 13a:	8c 93       	st	X, r24
	SET_BIT(PORTB,PB1);
 13c:	a8 e3       	ldi	r26, 0x38	; 56
 13e:	b0 e0       	ldi	r27, 0x00	; 0
 140:	e8 e3       	ldi	r30, 0x38	; 56
 142:	f0 e0       	ldi	r31, 0x00	; 0
 144:	80 81       	ld	r24, Z
 146:	82 60       	ori	r24, 0x02	; 2
 148:	8c 93       	st	X, r24
	CLEAR_BIT(PORTB,PB0);
 14a:	a8 e3       	ldi	r26, 0x38	; 56
 14c:	b0 e0       	ldi	r27, 0x00	; 0
 14e:	e8 e3       	ldi	r30, 0x38	; 56
 150:	f0 e0       	ldi	r31, 0x00	; 0
 152:	80 81       	ld	r24, Z
 154:	8e 7f       	andi	r24, 0xFE	; 254
 156:	8c 93       	st	X, r24
//	Pin 4 and 5 in port c is used to control the motor:
//	1-PINC4 is cleared and PINC5 IS SET to allow clockwise movement
//
}
 158:	cf 91       	pop	r28
 15a:	df 91       	pop	r29
 15c:	08 95       	ret

0000015e <motor_stop_init>:
 void motor_stop_init(void)
 {
 15e:	df 93       	push	r29
 160:	cf 93       	push	r28
 162:	cd b7       	in	r28, 0x3d	; 61
 164:	de b7       	in	r29, 0x3e	; 62
	 CLEAR_BIT(PORTB,PB0);
 166:	a8 e3       	ldi	r26, 0x38	; 56
 168:	b0 e0       	ldi	r27, 0x00	; 0
 16a:	e8 e3       	ldi	r30, 0x38	; 56
 16c:	f0 e0       	ldi	r31, 0x00	; 0
 16e:	80 81       	ld	r24, Z
 170:	8e 7f       	andi	r24, 0xFE	; 254
 172:	8c 93       	st	X, r24
	 CLEAR_BIT(PORTB,PB1);
 174:	a8 e3       	ldi	r26, 0x38	; 56
 176:	b0 e0       	ldi	r27, 0x00	; 0
 178:	e8 e3       	ldi	r30, 0x38	; 56
 17a:	f0 e0       	ldi	r31, 0x00	; 0
 17c:	80 81       	ld	r24, Z
 17e:	8d 7f       	andi	r24, 0xFD	; 253
 180:	8c 93       	st	X, r24
 }
 182:	cf 91       	pop	r28
 184:	df 91       	pop	r29
 186:	08 95       	ret

00000188 <seven_seg_init>:

 void seven_seg_init(void)
 {
 188:	df 93       	push	r29
 18a:	cf 93       	push	r28
 18c:	cd b7       	in	r28, 0x3d	; 61
 18e:	de b7       	in	r29, 0x3e	; 62
	 DDRC=0xFF;
 190:	e4 e3       	ldi	r30, 0x34	; 52
 192:	f0 e0       	ldi	r31, 0x00	; 0
 194:	8f ef       	ldi	r24, 0xFF	; 255
 196:	80 83       	st	Z, r24
	 SET_BIT(DDRD,PD0);
 198:	a1 e3       	ldi	r26, 0x31	; 49
 19a:	b0 e0       	ldi	r27, 0x00	; 0
 19c:	e1 e3       	ldi	r30, 0x31	; 49
 19e:	f0 e0       	ldi	r31, 0x00	; 0
 1a0:	80 81       	ld	r24, Z
 1a2:	81 60       	ori	r24, 0x01	; 1
 1a4:	8c 93       	st	X, r24
	 SET_BIT(DDRD,PD1);
 1a6:	a1 e3       	ldi	r26, 0x31	; 49
 1a8:	b0 e0       	ldi	r27, 0x00	; 0
 1aa:	e1 e3       	ldi	r30, 0x31	; 49
 1ac:	f0 e0       	ldi	r31, 0x00	; 0
 1ae:	80 81       	ld	r24, Z
 1b0:	82 60       	ori	r24, 0x02	; 2
 1b2:	8c 93       	st	X, r24
	 SET_BIT(PORTD,PD0);
 1b4:	a2 e3       	ldi	r26, 0x32	; 50
 1b6:	b0 e0       	ldi	r27, 0x00	; 0
 1b8:	e2 e3       	ldi	r30, 0x32	; 50
 1ba:	f0 e0       	ldi	r31, 0x00	; 0
 1bc:	80 81       	ld	r24, Z
 1be:	81 60       	ori	r24, 0x01	; 1
 1c0:	8c 93       	st	X, r24
	 SET_BIT(PORTD,PD1);
 1c2:	a2 e3       	ldi	r26, 0x32	; 50
 1c4:	b0 e0       	ldi	r27, 0x00	; 0
 1c6:	e2 e3       	ldi	r30, 0x32	; 50
 1c8:	f0 e0       	ldi	r31, 0x00	; 0
 1ca:	80 81       	ld	r24, Z
 1cc:	82 60       	ori	r24, 0x02	; 2
 1ce:	8c 93       	st	X, r24
	 PORTC=0;
 1d0:	e5 e3       	ldi	r30, 0x35	; 53
 1d2:	f0 e0       	ldi	r31, 0x00	; 0
 1d4:	10 82       	st	Z, r1

 }
 1d6:	cf 91       	pop	r28
 1d8:	df 91       	pop	r29
 1da:	08 95       	ret

000001dc <main>:


int main(void)
{
 1dc:	df 93       	push	r29
 1de:	cf 93       	push	r28
 1e0:	0f 92       	push	r0
 1e2:	cd b7       	in	r28, 0x3d	; 61
 1e4:	de b7       	in	r29, 0x3e	; 62
	DDRA=0x00;
 1e6:	ea e3       	ldi	r30, 0x3A	; 58
 1e8:	f0 e0       	ldi	r31, 0x00	; 0
 1ea:	10 82       	st	Z, r1
	PORTA|=0XFF;
 1ec:	eb e3       	ldi	r30, 0x3B	; 59
 1ee:	f0 e0       	ldi	r31, 0x00	; 0
 1f0:	80 81       	ld	r24, Z
 1f2:	eb e3       	ldi	r30, 0x3B	; 59
 1f4:	f0 e0       	ldi	r31, 0x00	; 0
 1f6:	8f ef       	ldi	r24, 0xFF	; 255
 1f8:	80 83       	st	Z, r24
	seven_seg_init();
 1fa:	0e 94 c4 00 	call	0x188	; 0x188 <seven_seg_init>
	timer0_pause_init();
 1fe:	0e 94 74 00 	call	0xe8	; 0xe8 <timer0_pause_init>
	while(1)
	{
		PORTC=current_speed;
 202:	e5 e3       	ldi	r30, 0x35	; 53
 204:	f0 e0       	ldi	r31, 0x00	; 0
 206:	80 91 60 00 	lds	r24, 0x0060
 20a:	80 83       	st	Z, r24
		if(!(PINA&(1<<PA2)))
 20c:	e9 e3       	ldi	r30, 0x39	; 57
 20e:	f0 e0       	ldi	r31, 0x00	; 0
 210:	80 81       	ld	r24, Z
 212:	88 2f       	mov	r24, r24
 214:	90 e0       	ldi	r25, 0x00	; 0
 216:	84 70       	andi	r24, 0x04	; 4
 218:	90 70       	andi	r25, 0x00	; 0
 21a:	00 97       	sbiw	r24, 0x00	; 0
 21c:	c9 f4       	brne	.+50     	; 0x250 <main+0x74>
		{
			if(CHECK_IF_CLEAR(PORTB,PB1)))
 21e:	e8 e3       	ldi	r30, 0x38	; 56
 220:	f0 e0       	ldi	r31, 0x00	; 0
 222:	80 81       	ld	r24, Z
 224:	88 2f       	mov	r24, r24
 226:	90 e0       	ldi	r25, 0x00	; 0
 228:	82 70       	andi	r24, 0x02	; 2
 22a:	90 70       	andi	r25, 0x00	; 0
 22c:	00 97       	sbiw	r24, 0x00	; 0
 22e:	19 f4       	brne	.+6      	; 0x236 <main+0x5a>
			{
			motor_start_init();
 230:	0e 94 8c 00 	call	0x118	; 0x118 <motor_start_init>
 234:	0d c0       	rjmp	.+26     	; 0x250 <main+0x74>
			}
			else if(CHECK_IF_SET(PORTB,PB1))
 236:	e8 e3       	ldi	r30, 0x38	; 56
 238:	f0 e0       	ldi	r31, 0x00	; 0
 23a:	80 81       	ld	r24, Z
 23c:	88 2f       	mov	r24, r24
 23e:	90 e0       	ldi	r25, 0x00	; 0
 240:	82 70       	andi	r24, 0x02	; 2
 242:	90 70       	andi	r25, 0x00	; 0
 244:	00 97       	sbiw	r24, 0x00	; 0
 246:	21 f0       	breq	.+8      	; 0x250 <main+0x74>
			{
				motor_stop_init();
 248:	0e 94 af 00 	call	0x15e	; 0x15e <motor_stop_init>
				current_speed=0;
 24c:	10 92 60 00 	sts	0x0060, r1
			}
		}
		PORTC=current_speed;
 250:	e5 e3       	ldi	r30, 0x35	; 53
 252:	f0 e0       	ldi	r31, 0x00	; 0
 254:	80 91 60 00 	lds	r24, 0x0060
 258:	80 83       	st	Z, r24
		if(!(PINA&(1<<PA3)))  //speed 1
 25a:	e9 e3       	ldi	r30, 0x39	; 57
 25c:	f0 e0       	ldi	r31, 0x00	; 0
 25e:	80 81       	ld	r24, Z
 260:	88 2f       	mov	r24, r24
 262:	90 e0       	ldi	r25, 0x00	; 0
 264:	88 70       	andi	r24, 0x08	; 8
 266:	90 70       	andi	r25, 0x00	; 0
 268:	00 97       	sbiw	r24, 0x00	; 0
 26a:	39 f4       	brne	.+14     	; 0x27a <main+0x9e>
		{
			timer0_init(128);
 26c:	80 e8       	ldi	r24, 0x80	; 128
 26e:	90 e0       	ldi	r25, 0x00	; 0
 270:	0e 94 3e 00 	call	0x7c	; 0x7c <timer0_init>
			current_speed=1;
 274:	81 e0       	ldi	r24, 0x01	; 1
 276:	80 93 60 00 	sts	0x0060, r24
		}
		if(!(PINA&(1<<PA4)))  //speed 2
 27a:	e9 e3       	ldi	r30, 0x39	; 57
 27c:	f0 e0       	ldi	r31, 0x00	; 0
 27e:	80 81       	ld	r24, Z
 280:	88 2f       	mov	r24, r24
 282:	90 e0       	ldi	r25, 0x00	; 0
 284:	80 71       	andi	r24, 0x10	; 16
 286:	90 70       	andi	r25, 0x00	; 0
 288:	00 97       	sbiw	r24, 0x00	; 0
 28a:	39 f4       	brne	.+14     	; 0x29a <main+0xbe>
		{
			timer0_init(64);
 28c:	80 e4       	ldi	r24, 0x40	; 64
 28e:	90 e0       	ldi	r25, 0x00	; 0
 290:	0e 94 3e 00 	call	0x7c	; 0x7c <timer0_init>
			current_speed=2;
 294:	82 e0       	ldi	r24, 0x02	; 2
 296:	80 93 60 00 	sts	0x0060, r24
		}
		if(!(PINA&(1<<PA5)))  //speed 3
 29a:	e9 e3       	ldi	r30, 0x39	; 57
 29c:	f0 e0       	ldi	r31, 0x00	; 0
 29e:	80 81       	ld	r24, Z
 2a0:	88 2f       	mov	r24, r24
 2a2:	90 e0       	ldi	r25, 0x00	; 0
 2a4:	80 72       	andi	r24, 0x20	; 32
 2a6:	90 70       	andi	r25, 0x00	; 0
 2a8:	00 97       	sbiw	r24, 0x00	; 0
 2aa:	09 f0       	breq	.+2      	; 0x2ae <main+0xd2>
 2ac:	aa cf       	rjmp	.-172    	; 0x202 <main+0x26>
		{
			timer0_init(5);
 2ae:	85 e0       	ldi	r24, 0x05	; 5
 2b0:	90 e0       	ldi	r25, 0x00	; 0
 2b2:	0e 94 3e 00 	call	0x7c	; 0x7c <timer0_init>
			current_speed=3;
 2b6:	83 e0       	ldi	r24, 0x03	; 3
 2b8:	80 93 60 00 	sts	0x0060, r24
 2bc:	a2 cf       	rjmp	.-188    	; 0x202 <main+0x26>

000002be <_exit>:
 2be:	f8 94       	cli

000002c0 <__stop_program>:
 2c0:	ff cf       	rjmp	.-2      	; 0x2c0 <__stop_program>
